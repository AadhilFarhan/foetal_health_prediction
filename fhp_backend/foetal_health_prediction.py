# -*- coding: utf-8 -*-
"""foetal_health_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d7dl1BEw-kWfgtsEEY0ROMn3VE0DyQ6U
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle as pkl
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras


url = 'https://raw.githubusercontent.com/rachel1306/foetal_health_prediction/main/fetal_health.csv'
df = pd.read_csv(url)

df.head()


df.describe().transpose()

df.isnull().sum()

df_correaltion = df.corr(method = 'pearson')

plt.figure(figsize=(15,15))
sns.regplot(data=df,x='accelerations',y='percentage_of_time_with_abnormal_long_term_variability')

df.drop(['mean_value_of_long_term_variability','histogram_width','histogram_min','histogram_max','histogram_number_of_peaks','histogram_number_of_zeroes','histogram_mode','histogram_mean','histogram_median','histogram_variance','histogram_tendency'],axis =1, inplace=True)

df_correaltion = df.corr(method = 'pearson')

plt.figure(figsize=(15,15))
sns.heatmap(data = df_correaltion,color = 'b',annot = True)

plt.figure(figsize=(15,15))
sns.regplot(data=df,x="light_decelerations", y="mean_value_of_short_term_variability")

plt.figure(figsize=(15,15))
sns.regplot(data=df,x='mean_value_of_short_term_variability',y='percentage_of_time_with_abnormal_long_term_variability')

sns.boxplot(x=df["baseline value"])

sns.boxplot(x=df['accelerations'])

sns.boxplot(x=df['fetal_movement'])

sns.boxplot(x=df['uterine_contractions'])

sns.boxplot(x=df['light_decelerations'])

df['fetal_health']=df['fetal_health'].replace({1:0,2:1,3:2})

def removeOutlier(attribute, data):
    lowerbound = attribute.mean() - 3 * attribute.std()
    upperbound = attribute.mean() + 3 * attribute.std()
    data1 = data[(attribute > lowerbound) & (attribute < upperbound)]
    data = data1.copy()
    return data

df=removeOutlier(df['percentage_of_time_with_abnormal_long_term_variability'],df)
df.info()

X=df.iloc[:,:-1]
y=df.iloc[:,-1]

col_names = list(X.columns)


sc = StandardScaler()
X_ss= sc.fit_transform(X)
X_ss = pd.DataFrame(X_ss, columns=col_names)



X_train, X_test, y_train,y_test = train_test_split(X_ss,y,test_size=0.3,random_state=42)


nn = tf.keras.models.Sequential()

nn.add(tf.keras.layers.Dense(units=64, activation='relu', input_shape=(X_train.shape[1],)))
nn.add(tf.keras.layers.Dense(units=64, activation='relu'))
nn.add(tf.keras.layers.Dense(units=8, activation='softmax'))

nn.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history=nn.fit(X_train, y_train, batch_size=100, epochs=180, verbose=1, validation_data=(X_test, y_test))
loss, accuracy = nn.evaluate(X_test,y_test, verbose=0)


plt.figure(figsize=(12,12))
plt.plot(history.history['accuracy'], label='train')
plt.plot(history.history['val_accuracy'], label='test')
plt.show()

for col in df.columns:
  print(col)


pkl.dump(nn,open('model.pkl','wb'))

